!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
SIMULATION_TIME	verification/harness/top_tb.sv	/^	parameter SIMULATION_TIME = 2000000;	$/;"	c	language:SystemVerilog	module:top_tb
__MY_DRIVER__	verification/env/my_driver.sv	/^`define __MY_DRIVER__$/;"	c	language:SystemVerilog
__MY_ENV__	verification/env/my_env.sv	/^`define __MY_ENV__$/;"	c	language:SystemVerilog
__MY_IF__	verification/env/my_if.sv	/^`define __MY_IF__$/;"	c	language:SystemVerilog
__MY_TRAN__	verification/env/my_transcation.sv	/^`define __MY_TRAN__$/;"	c	language:SystemVerilog
all	verification/sim/Makefile	/^all: \\$/;"	t	language:Make
build_phase	verification/env/my_driver.sv	/^	virtual function void build_phase(uvm_phase phase);$/;"	f	language:SystemVerilog	class:my_driver
build_phase	verification/env/my_env.sv	/^	virtual function void build_phase(uvm_phase phase);$/;"	f	language:SystemVerilog	class:my_env
cal_crc	verification/env/my_transcation.sv	/^	function bit[31:0] cal_crc();$/;"	f	language:SystemVerilog	class:my_transcation
clean	verification/sim/Makefile	/^clean  :$/;"	t	language:Make
clk	rtl/dut.v	/^	input	wire		clk			;$/;"	p	language:Verilog	module:dut
clk	verification/env/my_if.sv	/^interface my_if(input clk, input rst_n);$/;"	p	language:SystemVerilog	interface:my_if
clk	verification/harness/top_tb.sv	/^	reg	  		clk		;$/;"	r	language:SystemVerilog	module:top_tb
crc	verification/env/my_transcation.sv	/^	rand bit[31:0]	crc 		;$/;"	r	language:SystemVerilog	class:my_transcation
data	verification/env/my_if.sv	/^		logic [7:0] data;$/;"	r	language:SystemVerilog	interface:my_if
data_q	verification/env/my_driver.sv	/^	bit [7:0]	data_q[$];$/;"	r	language:SystemVerilog	task:my_driver.drive_one_pkt
dest_mac	verification/env/my_transcation.sv	/^	rand bit[47:0]	dest_mac	;$/;"	r	language:SystemVerilog	class:my_transcation
drive_one_pkt	verification/env/my_driver.sv	/^task my_driver::drive_one_pkt(my_transcation tr);$/;"	t	language:SystemVerilog	class:my_driver
dut	rtl/dut.v	/^module dut($/;"	m	language:Verilog
ether_type	verification/env/my_transcation.sv	/^	rand bit[15:0]	ether_type	;$/;"	r	language:SystemVerilog	class:my_transcation
i	verification/env/my_driver.sv	/^	for(int i = 0; i < 2; i++)begin$/;"	r	language:SystemVerilog	task:my_driver.drive_one_pkt
i	verification/env/my_driver.sv	/^	for(int i = 0; i < 2; i++)begin$/;"	r	language:SystemVerilog	task:my_driver.main_phase
i	verification/env/my_driver.sv	/^	for(int i = 0; i < 4; i++)begin$/;"	r	language:SystemVerilog	task:my_driver.drive_one_pkt
i	verification/env/my_driver.sv	/^	for(int i = 0; i < 6; i++)begin$/;"	r	language:SystemVerilog	task:my_driver.drive_one_pkt
i	verification/env/my_driver.sv	/^	for(int i = 0; i < tr.payload.size; i++)begin$/;"	r	language:SystemVerilog	task:my_driver.drive_one_pkt
main_phase	verification/env/my_driver.sv	/^task my_driver::main_phase(uvm_phase phase);	$/;"	t	language:SystemVerilog	class:my_driver
my_driver	verification/env/my_driver.sv	/^class my_driver extends uvm_driver;$/;"	C	language:SystemVerilog
my_env	verification/env/my_env.sv	/^class my_env extends uvm_env;$/;"	C	language:SystemVerilog
my_if	verification/env/my_if.sv	/^interface my_if(input clk, input rst_n);$/;"	I	language:SystemVerilog
my_transcation	verification/env/my_transcation.sv	/^class my_transcation extends uvm_sequence_item;$/;"	C	language:SystemVerilog
name	verification/env/my_driver.sv	/^	function new(string name = "my_driver", uvm_component parent = null);$/;"	p	language:SystemVerilog	function:my_driver.new
name	verification/env/my_env.sv	/^	function new(string name = "my_env", uvm_component parent);$/;"	p	language:SystemVerilog	function:my_env.new
name	verification/env/my_transcation.sv	/^	function new(string name = "my_transcation");$/;"	p	language:SystemVerilog	function:my_transcation.new
new	verification/env/my_driver.sv	/^	function new(string name = "my_driver", uvm_component parent = null);$/;"	f	language:SystemVerilog	class:my_driver
new	verification/env/my_env.sv	/^	function new(string name = "my_env", uvm_component parent);$/;"	f	language:SystemVerilog	class:my_env
new	verification/env/my_transcation.sv	/^	function new(string name = "my_transcation");$/;"	f	language:SystemVerilog	class:my_transcation
parent	verification/env/my_driver.sv	/^	function new(string name = "my_driver", uvm_component parent = null);$/;"	p	language:SystemVerilog	function:my_driver.new
parent	verification/env/my_env.sv	/^	function new(string name = "my_env", uvm_component parent);$/;"	p	language:SystemVerilog	function:my_env.new
payload	verification/env/my_transcation.sv	/^	rand byte		payload[]	;$/;"	r	language:SystemVerilog	class:my_transcation
phase	verification/env/my_driver.sv	/^	virtual function void build_phase(uvm_phase phase);$/;"	p	language:SystemVerilog	function:my_driver.build_phase
phase	verification/env/my_driver.sv	/^task my_driver::main_phase(uvm_phase phase);	$/;"	p	language:SystemVerilog	task:my_driver.main_phase
phase	verification/env/my_env.sv	/^	virtual function void build_phase(uvm_phase phase);$/;"	p	language:SystemVerilog	function:my_env.build_phase
post_randomize	verification/env/my_transcation.sv	/^	function void post_randomize();$/;"	f	language:SystemVerilog	class:my_transcation
reg_value	rtl/dut.v	/^	output	reg[63:0]	reg_value	;$/;"	p	language:Verilog	module:dut
reg_value	verification/harness/top_tb.sv	/^	reg [63:0]	reg_value;$/;"	r	language:SystemVerilog	module:top_tb
regone	verification/sim/Makefile	/^regone:vcs sim$/;"	t	language:Make
rst_n	rtl/dut.v	/^	input	wire		rst_n		;$/;"	p	language:Verilog	module:dut
rst_n	verification/env/my_if.sv	/^interface my_if(input clk, input rst_n);$/;"	p	language:SystemVerilog	interface:my_if
rst_n	verification/harness/top_tb.sv	/^	reg	  		rst_n	;$/;"	r	language:SystemVerilog	module:top_tb
run	verification/sim/Makefile	/^run   :$/;"	t	language:Make
rxd	rtl/dut.v	/^	input	wire[7:0]	rxd			;$/;"	p	language:Verilog	module:dut
rxd	verification/harness/top_tb.sv	/^	reg[7:0] 	rxd		;$/;"	r	language:SystemVerilog	module:top_tb
rxd_v	rtl/dut.v	/^	input	wire		rxd_v		;$/;"	p	language:Verilog	module:dut
rxd_v	verification/harness/top_tb.sv	/^	reg 	 	rxd_v	;$/;"	r	language:SystemVerilog	module:top_tb
sim	verification/sim/Makefile	/^sim	:$/;"	t	language:Make
src_mac	verification/env/my_transcation.sv	/^	rand bit[47:0]	src_mac		;$/;"	r	language:SystemVerilog	class:my_transcation
testname	verification/harness/top_tb.sv	/^	reg [255:0] testname;$/;"	r	language:SystemVerilog	module:top_tb
tmp_data	verification/env/my_driver.sv	/^	bit [47:0] 	tmp_data ;$/;"	r	language:SystemVerilog	task:my_driver.drive_one_pkt
top_tb	verification/harness/top_tb.sv	/^module top_tb;$/;"	m	language:SystemVerilog
tr	verification/env/my_driver.sv	/^task my_driver::drive_one_pkt(my_transcation tr);$/;"	p	language:SystemVerilog	task:my_driver.drive_one_pkt
tx_en	rtl/dut.v	/^	output	reg			tx_en		;$/;"	p	language:Verilog	module:dut
tx_en	verification/harness/top_tb.sv	/^	wire		tx_en	;$/;"	n	language:SystemVerilog	module:top_tb
txd	rtl/dut.v	/^	output	reg[7:0]	txd			;$/;"	p	language:Verilog	module:dut
txd	verification/harness/top_tb.sv	/^	wire[7:0]	txd		;$/;"	n	language:SystemVerilog	module:top_tb
valid	verification/env/my_if.sv	/^		logic valid;$/;"	r	language:SystemVerilog	interface:my_if
verdi	verification/sim/Makefile	/^verdi  :$/;"	t	language:Make
